package com.mycompany.usoarchivos.memoria;

import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author saien
 */
public class MemoryGame extends JFrame {

    private JButton[] buttons;
    private static final String PATH_BALONCESTO = "/home/saien/Imágenes/Imagenes Memoria/baloncesto.png";
    private static final String PATH_RUGBY = "/home/saien/Imágenes/Imagenes Memoria/rugby.png";
    private int[] cardValues;
    private boolean[] cardStatus;
    private int selectedCardIndex;
    private int pairsFound;

    public MemoryGame() {
        setTitle("Memory Game");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Configuración del diseño de la ventana
        setLayout(new GridLayout(2, 3)); // 2 filas, 3 columnas
        crearBotones();
        pack(); // Ajusta el tamaño de la ventana automáticamente
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        setVisible(true);
    }

    private void crearBotones() {
        //Quitamos sombreado al hacer click
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Creamos y añadimos botones al tablero
        for (int i = 0; i < 6; i++) {
            JButton button = new JButton(); 
            //Asignamos el tamaño del boton
            button.setSize(500, 500);
            button.setPreferredSize(new Dimension(500, 500));
            //Agregamos imagen de fondo
            ImageIcon imgFondo = new ImageIcon(PATH_BALONCESTO);
            Image img = imgFondo.getImage();
            Image imgEscalada = img.getScaledInstance(button.getWidth(), button.getHeight(), Image.SCALE_DEFAULT);
            ImageIcon iconFondo = new ImageIcon(imgEscalada);
            //Asignamos el icono al comienzo
            button.setIcon(iconFondo);

            //button.setBorderPainted(false);
            button.addActionListener((ActionEvent e) -> {
                Timer timer = new Timer(500, new ActionListener() {
                    private int count = 0;

                    @Override
                    public void actionPerformed(ActionEvent evt) {
                        if (count % 2 == 0) {
                            //clickedButton.setBackground(Color.red);
                            ImageIcon imgFondo = new ImageIcon(PATH_RUGBY);
                            Image img = imgFondo.getImage();
                            Image imgEscalada = img.getScaledInstance(button.getWidth(), button.getHeight(), Image.SCALE_DEFAULT);
                            ImageIcon iconFondo = new ImageIcon(imgEscalada);
                            button.setIcon(iconFondo);
                        } else {
                            ImageIcon imgFondo = new ImageIcon(PATH_BALONCESTO);
                            Image img = imgFondo.getImage();
                            Image imgEscalada = img.getScaledInstance(button.getWidth(), button.getHeight(), Image.SCALE_DEFAULT);
                            ImageIcon iconFondo = new ImageIcon(imgEscalada);
                            button.setIcon(iconFondo);

                        }
                        count++;
                        if (count == 2) {
                            ((Timer) evt.getSource()).stop();
                            //button.setIcon(iconFondo);
                        }
                    }
                });
                timer.start();
            });
            add(button);
        }
    }

    private void initializeCards() {
        // Aquí asigna valores a las cartas
        // En este ejemplo, solo asignamos valores a 3 parejas
    }

//
//    public MemoryGame() {
//        initComponents();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
